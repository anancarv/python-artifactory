[tool.poetry]
name = "PyArtifactory"
version = "2.10.0"
description = "Typed interactions with the Jfrog Artifactory REST API"
authors = [
    "Ananias CARVALHO <carvalhoananias@hotmail.com>",
    "Thomas GAUDIN <thomas.gaudin@centraliens-lille.org>",
    "Helio Chissini de Castro <heliocastro@gmail.com"
]
license = "MIT"
readme = "README.md"
repository = "https://github.com/anancarv/python-artifactory"
documentation = "https://github.com/anancarv/python-artifactory"
keywords = ["artifactory"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Typing :: Typed",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Filesystems",
    "Operating System :: OS Independent"
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/anancarv/python-artifactory/issues"

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.31"
typing_extensions = "^4.7.1"
pydantic = {extras = ["email"], version = "^2.4.0"}

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.289"
pytest = "^7.4.2"
black = "^23.3.0"
pre-commit = "^2.9.2"
responses = "^0.23.3"
pytest-mock = "^2.0.0"
detect-secrets = "^1.2.0"
pytest-cov = "^4.1.0"
mypy = "^1.5.1"
typed-ast = "^1.5.5"
types-urllib3 = "^1.26.25.14"
types-requests = "^2.31.0.2"
pytest-md = "^0.2.0"
pytest-emoji = "^0.2.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 120

[tool.black]
target-version = ["py310"]
line-length = 120
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]
log_cli = true
log_cli_level = "INFO"

[tool.mypy]
files = [
    "pyartifactory"
]
plugins = [
    "pydantic.mypy"
]

follow_imports = "normal"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = false
ignore_missing_imports = false
pretty = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff]
fix = true
line-length = 120
ignore = [ "N815", "S101", "UP", "A003" ]
extend-select = [
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "A",   # flakes8-builtins
    "COM", # flakes8-commas
    "C4",  # flake8-comprehensions
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "N",   # pep8 naming
    "S",   # bandit
]

# Exclude a variety of commonly ignored directories.
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.8
target-version = "py38"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]

[tool.bandit]
exclude_dirs = ["tests"]
